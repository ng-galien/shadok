#!/bin/bash

# üß™ Test Live Reload avec Modifications Sed - Quarkus Hello
# ================================================================
#
# Ce script teste la recompilation automatique en temps r√©el du webservice
# quarkus-hello en utilisant sed pour modifier le code source.
#
# Workflow test√© :
# 1. Test endpoint initial (/hello/json)
# 2. Modification du code avec sed
# 3. V√©rification recompilation automatique + nouveau comportement
# 4. Restauration du code original
# 5. V√©rification retour au comportement initial
#
# Usage: ./test-live-reload-simple.sh [options]

set -e

# ========================================
# üé® Configuration
# ========================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

NAMESPACE="shadok"
TIMEOUT=30
VERBOSE=false
BASE_URL="https://quarkus-hello.127.0.0.1.nip.io"
CURL_OPTS="-k -s"

print_header() {
    echo -e "\n${PURPLE}===============================================${NC}"
    echo -e "${PURPLE} üöÄ $1${NC}"
    echo -e "${PURPLE}===============================================${NC}\n"
}

print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${CYAN}üîç $1${NC}"
    fi
}

# ========================================
# üîç Tests HTTP des Endpoints
# ========================================

test_endpoint() {
    local description="$1"
    local expected_pattern="$2"
    
    print_step "Test: $description"
    
    local response=$(curl $CURL_OPTS "$BASE_URL/hello/json" 2>/dev/null || echo "ERROR")
    log_verbose "R√©ponse HTTP: $response"
    
    if [[ "$response" == *"$expected_pattern"* ]]; then
        print_success "‚úÖ Test r√©ussi - Pattern trouv√©: $expected_pattern"
        if [ "$VERBOSE" = true ]; then
            echo "  R√©ponse: $response"
        fi
        return 0
    else
        print_error "‚ùå Test √©chou√© - Pattern attendu: $expected_pattern"
        echo "  R√©ponse re√ßue: $response"
        return 1
    fi
}

wait_for_endpoint_change() {
    local expected_pattern="$1"
    local max_attempts="$2"
    local attempt=0
    
    print_step "Attente du changement d'endpoint (max ${max_attempts}s)..."
    
    while [ $attempt -lt $max_attempts ]; do
        sleep 1
        ((attempt++))
        
        local response=$(curl $CURL_OPTS "$BASE_URL/hello/json" 2>/dev/null || echo "ERROR")
        if [[ "$response" == *"$expected_pattern"* ]]; then
            print_success "Changement d√©tect√© apr√®s ${attempt}s !"
            return 0
        fi
        
        if [ $((attempt % 5)) -eq 0 ]; then
            log_verbose "Tentative $attempt/$max_attempts - En attente..."
        fi
    done
    
    print_error "Timeout: Aucun changement d√©tect√© apr√®s ${max_attempts}s"
    return 1
}

# ========================================
# üöÄ V√©rification de la Connectivit√©
# ========================================

verify_connectivity() {
    print_header "V√©rification de la Connectivit√©"
    
    print_step "Test de connectivit√© vers $BASE_URL..."
    
    if curl $CURL_OPTS "$BASE_URL/hello" > /dev/null 2>&1; then
        print_success "Ingress accessible et endpoint fonctionnel"
        return 0
    else
        print_error "Impossible de se connecter via l'Ingress"
        print_error "URL test√©e: $BASE_URL/hello"
        print_warning "V√©rifiez que l'application quarkus-hello est d√©ploy√©e"
        return 1
    fi
}

# ========================================
# üéØ Test Principal de Live Reload
# ========================================

run_live_reload_test() {
    print_header "Test Live Reload avec Modifications Sed"
    
    # √âtape 1: V√©rification de la connectivit√©
    if ! verify_connectivity; then
        exit 1
    fi
    
    # Variables pour les fichiers
    local source_file="src/main/java/com/shadok/pods/quarkus/HelloWorldResource.java"
    local backup_file="${source_file}.backup"
    
    # Fonction de nettoyage
    cleanup() {
        print_step "Nettoyage..."
        if [ -f "$backup_file" ]; then
            mv "$backup_file" "$source_file"
            print_success "Fichier restaur√© depuis la sauvegarde"
        fi
        rm -f "${source_file}.tmp" 2>/dev/null || true
    }
    trap cleanup EXIT
    
    # √âtape 2: Test √©tat initial
    print_step "üîç √âTAPE 1: Test de l'√©tat initial"
    if ! test_endpoint "√âtat initial" "Hello World from Quarkus Pod!"; then
        print_error "Test initial √©chou√© - Application pas accessible"
        exit 1
    fi
    
    # √âtape 3: Application du patch
    print_step "üîß √âTAPE 2: Application des modifications avec sed"
    
    if [ ! -f "$source_file" ]; then
        print_error "Fichier source non trouv√©: $source_file"
        exit 1
    fi
    
    # Sauvegarder le fichier original
    cp "$source_file" "$backup_file"
    print_success "Sauvegarde cr√©√©e: $backup_file"
    
    # Appliquer la modification avec sed
    sed -i.tmp 's/Hello World from Quarkus Pod!/üß™ LIVE RELOAD TEST ACTIVE! üöÄ/g' "$source_file"
    sed -i.tmp 's/"quarkus-hello"/"quarkus-hello-patched"/g' "$source_file"
    sed -i.tmp 's/"1.0.0"/"2.0.0-LIVE"/g' "$source_file"
    rm -f "${source_file}.tmp"
    
    print_success "Modifications appliqu√©es avec sed"
    log_verbose "Modifications appliqu√©es au fichier: $source_file"
    
    # √âtape 4: Attendre la recompilation et test
    print_step "‚è±Ô∏è  √âTAPE 3: Attente de la recompilation automatique"
    if wait_for_endpoint_change "LIVE RELOAD TEST ACTIVE" $TIMEOUT; then
        print_success "üéâ Recompilation automatique d√©tect√©e !"
        
        # Test de validation
        if test_endpoint "Apr√®s modification" "quarkus-hello-patched"; then
            print_success "‚úÖ Modification confirm√©e"
        else
            print_warning "‚ö†Ô∏è  Recompilation d√©tect√©e mais modification partielle"
        fi
    else
        print_error "‚ùå Recompilation automatique non d√©tect√©e"
        print_warning "Possible raisons:"
        print_warning "  ‚Ä¢ Live reload non activ√© dans le pod"
        print_warning "  ‚Ä¢ Volumes source non mont√©s"
        print_warning "  ‚Ä¢ Quarkus dev mode non actif"
        exit 1
    fi
    
    # √âtape 5: Revert du patch
    print_step "üîÑ √âTAPE 4: Restauration du code original"
    mv "$backup_file" "$source_file"
    print_success "Code original restaur√©"
    
    # √âtape 6: Test du retour √† l'√©tat initial
    print_step "üîç √âTAPE 5: V√©rification du retour √† l'√©tat initial"
    if wait_for_endpoint_change "Hello World from Quarkus Pod!" $TIMEOUT; then
        print_success "üéâ Retour √† l'√©tat initial confirm√© !"
        
        # Test final de validation
        if test_endpoint "√âtat final" "quarkus-hello"; then
            print_success "‚úÖ Test de live reload complet r√©ussi !"
            return 0
        else
            print_warning "‚ö†Ô∏è  Retour partiel √† l'√©tat initial"
            return 1
        fi
    else
        print_error "‚ùå Retour √† l'√©tat initial non d√©tect√©"
        return 1
    fi
}

# ========================================
# üìä Rapport de Test
# ========================================

generate_test_report() {
    local test_result=$1
    
    print_header "Rapport de Test Live Reload"
    
    if [ $test_result -eq 0 ]; then
        echo "üèÜ R√âSULTAT: SUCC√àS COMPLET"
        echo ""
        echo "‚úÖ Fonctionnalit√©s valid√©es:"
        echo "  ‚Ä¢ Live reload automatique actif"
        echo "  ‚Ä¢ Recompilation en temps r√©el fonctionnelle"
        echo "  ‚Ä¢ D√©tection des changements de code"
        echo "  ‚Ä¢ Endpoints HTTP r√©actifs aux modifications"
        echo "  ‚Ä¢ Workflow modification/restauration op√©rationnel"
        echo ""
        echo "üìà M√©triques:"
        echo "  ‚Ä¢ Timeout configur√©: ${TIMEOUT}s"
        echo "  ‚Ä¢ URL test√©e: $BASE_URL"
        echo "  ‚Ä¢ Namespace: $NAMESPACE"
        echo ""
        print_success "üöÄ Le live reload Quarkus fonctionne parfaitement !"
    else
        echo "‚ùå R√âSULTAT: √âCHEC"
        echo ""
        echo "üîß Points √† v√©rifier:"
        echo "  ‚Ä¢ L'application dispose-t-elle du live reload activ√© ?"
        echo "  ‚Ä¢ Les volumes source/cache sont-ils mont√©s ?"
        echo "  ‚Ä¢ Quarkus dev mode est-il actif dans le conteneur ?"
        echo "  ‚Ä¢ La commande './gradlew quarkusDev' est-elle utilis√©e ?"
        echo ""
        print_error "‚ö†Ô∏è  Le live reload n√©cessite une configuration suppl√©mentaire"
    fi
}

# ========================================
# üìö Aide
# ========================================

show_help() {
    echo "üß™ Test Live Reload avec Modifications Sed - Quarkus Hello"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --timeout SECS     Timeout recompilation (d√©faut: 30s)"
    echo "  --verbose          Logs d√©taill√©s"
    echo "  --help             Affiche cette aide"
    echo ""
    echo "Pr√©requis:"
    echo "  ‚Ä¢ Application quarkus-hello d√©ploy√©e avec Ingress actif"
    echo "  ‚Ä¢ Ingress accessible via $BASE_URL"
    echo "  ‚Ä¢ curl install√©"
    echo ""
    echo "Exemples:"
    echo "  $0                           # Test automatique"
    echo "  $0 --verbose                 # Avec logs d√©taill√©s"
    echo "  $0 --timeout 60              # Timeout personnalis√©"
    echo ""
}

# ========================================
# üöÄ Main
# ========================================

main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --timeout)
                TIMEOUT="$2"
                shift 2
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                print_error "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Header
    echo -e "${PURPLE}"
    echo "üß™ ============================================ üß™"
    echo "   Test Live Reload avec Modifications Sed"
    echo "     Quarkus Hello - Webservice"
    echo "=============================================="
    echo -e "${NC}"
    
    # V√©rifications pr√©alables
    if ! command -v curl > /dev/null 2>&1; then
        print_error "curl non disponible"
        exit 1
    fi
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if [ ! -f "src/main/java/com/shadok/pods/quarkus/HelloWorldResource.java" ]; then
        print_error "Doit √™tre ex√©cut√© depuis le r√©pertoire pods/quarkus-hello"
        exit 1
    fi
    
    # Ex√©cuter le test
    run_live_reload_test
    local result=$?
    
    # G√©n√©rer le rapport
    generate_test_report $result
    
    exit $result
}

main "$@"
