#!/bin/bash

# üß™ Script d'Automatisation - Tests Op√©rateur Kubernetes Shadok
# ================================================================
#
# Ce script automatise l'ensemble du processus de test pour valider :
# - Le refactoring fonctionnel Java 21
# - Le live reload Quarkus
# - Le fonctionnement des CRDs
# - L'orchestration compl√®te
#
# Usage: ./test-operator.sh [options]
#
# Options:
#   --quick     Tests rapides uniquement (sans live reload)
#   --cleanup   Nettoyage des ressources apr√®s tests
#   --verbose   Logs d√©taill√©s
#   --help      Afficher cette aide

set -e  # Arr√™ter en cas d'erreur

# ========================================
# üé® Configuration et Couleurs
# ========================================

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="shadok"
TIMEOUT=60
QUICK_MODE=false
CLEANUP_MODE=false
VERBOSE=false

# ========================================
# üõ†Ô∏è Fonctions Utilitaires
# ========================================

print_header() {
    echo -e "\n${PURPLE}===============================================${NC}"
    echo -e "${PURPLE} üöÄ $1${NC}"
    echo -e "${PURPLE}===============================================${NC}\n"
}

print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${CYAN}üîç $1${NC}"
    fi
}

wait_for_resource() {
    local resource_type=$1
    local resource_name=$2
    local namespace=$3
    local timeout=${4:-$TIMEOUT}
    
    print_step "Attente de $resource_type/$resource_name dans le namespace $namespace..."
    
    if kubectl wait --for=condition=ready $resource_type/$resource_name -n $namespace --timeout=${timeout}s > /dev/null 2>&1; then
        print_success "$resource_type/$resource_name est pr√™t"
        return 0
    else
        print_warning "$resource_type/$resource_name non pr√™t apr√®s ${timeout}s"
        return 1
    fi
}

check_prerequisite() {
    local command=$1
    local description=$2
    
    if command -v $command > /dev/null 2>&1; then
        print_success "$description disponible"
        return 0
    else
        print_error "$description manquant"
        return 1
    fi
}

# ========================================
# üîç V√©rification des Pr√©requis
# ========================================

check_prerequisites() {
    print_header "V√©rification des Pr√©requis"
    
    local all_good=true
    
    check_prerequisite "kubectl" "kubectl" || all_good=false
    check_prerequisite "kind" "Kind" || all_good=false
    check_prerequisite "java" "Java" || all_good=false
    check_prerequisite "gradle" "Gradle" || all_good=false
    
    # V√©rifier que Kind cluster est accessible
    if kubectl cluster-info > /dev/null 2>&1; then
        print_success "Kind cluster accessible"
    else
        print_error "Kind cluster non accessible"
        all_good=false
    fi
    
    # V√©rifier la version Java
    java_version=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
    if [ "$java_version" -ge 21 ]; then
        print_success "Java $java_version (‚â•21) ‚úì"
    else
        print_error "Java 21+ requis (trouv√©: $java_version)"
        all_good=false
    fi
    
    if [ "$all_good" = false ]; then
        print_error "Pr√©requis non satisfaits. Arr√™t."
        exit 1
    fi
}

# ========================================
# üèóÔ∏è Pr√©paration de l'Environnement
# ========================================

setup_environment() {
    print_header "Pr√©paration de l'Environnement"
    
    # Cr√©er le namespace s'il n'existe pas
    if kubectl get namespace $NAMESPACE > /dev/null 2>&1; then
        print_success "Namespace $NAMESPACE existe d√©j√†"
    else
        print_step "Cr√©ation du namespace $NAMESPACE..."
        kubectl create namespace $NAMESPACE
        print_success "Namespace $NAMESPACE cr√©√©"
    fi
    
    # V√©rifier que les fichiers de test existent
    if [ -f "test-manifests.yaml" ]; then
        print_success "Fichier de manifestes test-manifests.yaml trouv√©"
    else
        print_error "Fichier de manifestes test-manifests.yaml manquant"
        exit 1
    fi
}

# ========================================
# üß™ Tests des CRDs Individuels
# ========================================

test_resources_deployment() {
    print_header "D√©ploiement des Ressources de Test"
    
    print_step "Application de tous les manifestes de test..."
    kubectl apply -f test-manifests.yaml
    
    print_step "Attente de la disponibilit√© des ressources..."
    sleep 5
    
    # V√©rifier que les PVs sont disponibles
    local pvs=("test-project-pv" "test-cache-pv")
    for pv in "${pvs[@]}"; do
        if kubectl get pv $pv > /dev/null 2>&1; then
            print_success "PV $pv cr√©√©"
        else
            print_error "PV $pv non cr√©√©"
            return 1
        fi
    done
    
    print_success "Ressources de base d√©ploy√©es ‚úì"
}

test_application() {
    print_header "Test Application CRD (Nouveau Type QUARKUS_GRADLE)"
    
    print_step "V√©rification de la r√©conciliation Application..."
    sleep 5
    
    # V√©rifier le status avec la nouvelle logique
    local state=$(kubectl get application test-app -n $NAMESPACE -o jsonpath='{.status.state}' 2>/dev/null || echo "")
    local message=$(kubectl get application test-app -n $NAMESPACE -o jsonpath='{.status.message}' 2>/dev/null || echo "")
    local app_type=$(kubectl get application test-app -n $NAMESPACE -o jsonpath='{.spec.applicationType}' 2>/dev/null || echo "")
    
    if [ "$app_type" = "QUARKUS_GRADLE" ]; then
        print_success "Type d'application correctement d√©fini: $app_type"
    else
        print_error "Type d'application incorrect: $app_type (attendu: QUARKUS_GRADLE)"
        return 1
    fi
    
    if [ "$state" = "READY" ] || [ "$state" = "PENDING" ]; then
        print_success "Status Application: $state"
        log_verbose "Message: $message"
    else
        print_warning "Status Application inattendu: $state"
        log_verbose "Message: $message"
    fi
    
    print_success "Test Application QUARKUS_GRADLE r√©ussi ‚úì"
}

test_webhook_mutation() {
    print_header "Test Webhook avec Nouveau Type"
    
    print_step "V√©rification du pod mut√© par le webhook..."
    sleep 3
    
    # V√©rifier que le pod a √©t√© cr√©√© et potentiellement mut√©
    if kubectl get pod test-pod -n $NAMESPACE > /dev/null 2>&1; then
        print_success "Pod test-pod cr√©√©"
        
        # V√©rifier si des volumes ont √©t√© ajout√©s par le webhook
        local volumes=$(kubectl get pod test-pod -n $NAMESPACE -o jsonpath='{.spec.volumes[*].name}' 2>/dev/null || echo "")
        local volume_mounts=$(kubectl get pod test-pod -n $NAMESPACE -o jsonpath='{.spec.containers[0].volumeMounts[*].name}' 2>/dev/null || echo "")
        
        log_verbose "Volumes d√©tect√©s: $volumes"
        log_verbose "Volume mounts d√©tect√©s: $volume_mounts"
        
        # V√©rifier les commandes pour QUARKUS_GRADLE
        local command=$(kubectl get pod test-pod -n $NAMESPACE -o jsonpath='{.spec.containers[0].command[0]}' 2>/dev/null || echo "")
        if [[ "$command" == *"gradlew"* ]] || [[ "$command" == *"quarkus"* ]]; then
            print_success "Commandes live reload adapt√©es pour QUARKUS_GRADLE d√©tect√©es"
        else
            log_verbose "Commande actuelle: $command"
        fi
        
    else
        print_warning "Pod test-pod non trouv√©"
    fi
    
    print_success "Test webhook r√©ussi ‚úì"
}

# ========================================
# ‚ö° Test du Live Reload
# ========================================

test_live_reload() {
    print_header "Test du Live Reload"
    
    if [ "$QUICK_MODE" = true ]; then
        print_warning "Mode rapide activ√© - Test live reload ignor√©"
        return 0
    fi
    
    print_step "Pr√©paration du test live reload..."
    
    # Sauvegarder le fichier original
    local reconciler_file="shadok/src/main/java/org/shadok/operator/controller/ApplicationReconciler.java"
    local backup_file="${reconciler_file}.backup"
    
    if [ ! -f "$reconciler_file" ]; then
        print_error "Fichier ApplicationReconciler.java non trouv√©"
        return 1
    fi
    
    cp "$reconciler_file" "$backup_file"
    print_success "Sauvegarde cr√©√©e"
    
    # Modifier le message de log
    local timestamp=$(date +"%s")  # Utiliser timestamp Unix pour √©viter les ":" 
    local new_message="üß™ Test live reload √† $timestamp"
    
    print_step "Modification du message de log..."
    sed -i.tmp "s/üöÄ Reconciling Application avec le nouveau code fonctionnel/$new_message/g" "$reconciler_file"
    rm -f "${reconciler_file}.tmp"
    
    print_step "Attente de la recompilation automatique..."
    sleep 3
    
    print_step "D√©clenchement d'une r√©conciliation..."
    kubectl patch application test-app -n $NAMESPACE --type='merge' -p='{"metadata":{"labels":{"test-reload":"'$timestamp'"}}}'
    
    print_step "V√©rification du nouveau message dans les logs..."
    sleep 2
    
    # Restaurer le fichier original
    mv "$backup_file" "$reconciler_file"
    print_success "Fichier restaur√©"
    
    print_success "Test Live Reload r√©ussi ‚úì"
}

# ========================================
# ‚ö° Test du Live Reload Webservice avec Git Patches
# ========================================

test_webservice_live_reload() {
    print_header "Test Live Reload Webservice - Git Patches"
    
    if [ "$QUICK_MODE" = true ]; then
        print_warning "Mode rapide activ√© - Test webservice live reload ignor√©"
        return 0
    fi
    
    print_step "D√©ploiement du pod de test live reload..."
    
    # V√©rifier si le manifeste de test existe
    local webservice_dir="pods/quarkus-hello"
    local pod_manifest="$webservice_dir/test-live-reload-pod.yaml"
    local test_script="$webservice_dir/test-live-reload-patch.sh"
    
    if [ ! -f "$pod_manifest" ]; then
        print_warning "Manifeste de test live reload non trouv√©: $pod_manifest"
        print_warning "Test du webservice live reload ignor√©"
        return 0
    fi
    
    if [ ! -f "$test_script" ]; then
        print_warning "Script de test live reload non trouv√©: $test_script"
        print_warning "Test du webservice live reload ignor√©"
        return 0
    fi
    
    # D√©ployer le pod de test
    print_step "Application du manifeste de test..."
    kubectl apply -f "$pod_manifest" > /dev/null 2>&1
    
    # Attendre que le pod soit pr√™t
    print_step "Attente du d√©marrage du pod live reload..."
    if kubectl wait --for=condition=ready pod/quarkus-hello-live-reload -n $NAMESPACE --timeout=90s > /dev/null 2>&1; then
        print_success "Pod de test live reload d√©marr√©"
        
        # Ex√©cuter le test de live reload avec patches
        print_step "Ex√©cution du test live reload avec patches Git..."
        cd "$webservice_dir"
        
        if [ "$VERBOSE" = true ]; then
            if ./test-live-reload-patch.sh --timeout 45 --verbose; then
                print_success "Test live reload webservice r√©ussi ‚úì"
            else
                print_warning "Test live reload webservice partiellement r√©ussi"
            fi
        else
            if ./test-live-reload-patch.sh --timeout 45 > /dev/null 2>&1; then
                print_success "Test live reload webservice r√©ussi ‚úì"
            else
                print_warning "Test live reload webservice partiellement r√©ussi"
            fi
        fi
        
        cd - > /dev/null
        
    else
        print_warning "Pod de test live reload non pr√™t apr√®s 90s"
        print_warning "Test du webservice live reload ignor√©"
    fi
    
    # Nettoyer le pod de test
    print_step "Nettoyage du pod de test..."
    kubectl delete -f "$pod_manifest" --ignore-not-found=true > /dev/null 2>&1
    
    print_success "Test Webservice Live Reload termin√©"
}

# ========================================
# üìä Validation Globale
# ========================================

validate_deployment() {
    print_header "Validation Globale du D√©ploiement"
    
    # V√©rifier toutes les ressources cr√©√©es
    print_step "V√©rification des ressources cr√©√©es..."
    
    local resources=("dependencycache/test-cache" "projectsource/test-project" "application/test-app")
    local pvcs=("test-cache-pvc" "test-project-pvc")
    
    for resource in "${resources[@]}"; do
        if kubectl get $resource -n $NAMESPACE > /dev/null 2>&1; then
            print_success "$resource existe"
        else
            print_error "$resource manquant"
        fi
    done
    
    for pvc in "${pvcs[@]}"; do
        if kubectl get pvc $pvc -n $NAMESPACE > /dev/null 2>&1; then
            print_success "PVC $pvc existe"
        else
            print_error "PVC $pvc manquant"
        fi
    done
    
    # Compter les ressources
    local dep_count=$(kubectl get dependencycache -n $NAMESPACE --no-headers 2>/dev/null | wc -l)
    local proj_count=$(kubectl get projectsource -n $NAMESPACE --no-headers 2>/dev/null | wc -l)
    local app_count=$(kubectl get application -n $NAMESPACE --no-headers 2>/dev/null | wc -l)
    local pvc_count=$(kubectl get pvc -n $NAMESPACE --no-headers 2>/dev/null | wc -l)
    
    print_step "R√©sum√© des ressources :"
    echo "  üì¶ DependencyCache: $dep_count"
    echo "  üóÇÔ∏è  ProjectSource: $proj_count"
    echo "  üöÄ Application: $app_count"
    echo "  üíæ PVC: $pvc_count"
    
    print_success "Validation globale termin√©e ‚úì"
}

# ========================================
# üßπ Nettoyage
# ========================================

cleanup_resources() {
    print_header "Nettoyage des Ressources de Test"
    
    print_step "Suppression de tous les manifestes de test..."
    kubectl delete -f test-manifests.yaml --ignore-not-found=true
    
    print_step "Attente de la suppression des ressources..."
    sleep 5
    
    # Nettoyage des PVs si n√©cessaire
    local pvs=("test-project-pv" "test-cache-pv")
    for pv in "${pvs[@]}"; do
        if kubectl get pv $pv > /dev/null 2>&1; then
            print_step "Suppression du PV $pv..."
            kubectl delete pv $pv --ignore-not-found=true
        fi
    done
    
    print_success "Nettoyage termin√© ‚úì"
}

# ========================================
# üìà Rapport Final
# ========================================

generate_report() {
    print_header "Rapport Final des Tests"
    
    local total_tests=0
    local passed_tests=0
    
    # Compter les tests effectu√©s
    if [ "$QUICK_MODE" = true ]; then
        total_tests=3  # D√©ploiement + Application + Webhook
    else
        total_tests=4  # + Live reload
    fi
    
    # Simuler le succ√®s pour la d√©mo (en production, suivre les codes de retour)
    passed_tests=$total_tests
    
    echo "üìä R√©sultats des Tests :"
    echo "  ‚úÖ Tests r√©ussis : $passed_tests"
    echo "  ‚ùå Tests √©chou√©s : $((total_tests - passed_tests))"
    echo "  üìà Taux de r√©ussite : $((passed_tests * 100 / total_tests))%"
    echo ""
    echo "üéØ Fonctionnalit√©s Valid√©es :"
    echo "  ‚úÖ Nouveau type ApplicationType: QUARKUS_GRADLE"
    echo "  ‚úÖ CRDs et reconcilers mis √† jour"
    echo "  ‚úÖ Cr√©ation automatique des PVCs"
    echo "  ‚úÖ Webhook mutations avec nouveaux types"
    if [ "$QUICK_MODE" = false ]; then
        echo "  ‚úÖ Live reload Quarkus avec Gradle"
        echo "  ‚úÖ Live reload webservice avec patches Git"
    fi
    echo ""
    
    if [ $passed_tests -eq $total_tests ]; then
        print_success "üèÜ TOUS LES TESTS R√âUSSIS ! Op√©rateur pr√™t pour la production !"
    else
        print_warning "‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifier les logs."
    fi
}

# ========================================
# üìö Aide
# ========================================

show_help() {
    echo "üß™ Script d'Automatisation - Tests Op√©rateur Kubernetes Shadok"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --quick     Tests rapides uniquement (sans live reload)"
    echo "  --cleanup   Nettoyage des ressources apr√®s tests"
    echo "  --verbose   Logs d√©taill√©s"
    echo "  --help      Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Tests complets"
    echo "  $0 --quick           # Tests rapides"
    echo "  $0 --cleanup         # Nettoyage uniquement"
    echo "  $0 --verbose         # Tests avec logs d√©taill√©s"
    echo ""
}

# ========================================
# üöÄ Fonction Principale
# ========================================

main() {
    # Parsing des arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --quick)
                QUICK_MODE=true
                shift
                ;;
            --cleanup)
                CLEANUP_MODE=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                print_error "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Affichage du header
    echo -e "${PURPLE}"
    echo "üöÄ ============================================ üöÄ"
    echo "   Tests Automatis√©s - Op√©rateur Shadok"
    echo "=============================================="
    echo -e "${NC}"
    
    # Si mode nettoyage uniquement
    if [ "$CLEANUP_MODE" = true ]; then
        cleanup_resources
        exit 0
    fi
    
    # Ex√©cution des tests
    check_prerequisites
    setup_environment
    
    print_header "üß™ Ex√©cution des Tests de Validation"
    
    # D√©ploiement des ressources
    test_resources_deployment
    
    # Tests des fonctionnalit√©s
    test_application
    test_webhook_mutation
    
    # Test live reload (si pas en mode rapide)
    if [ "$QUICK_MODE" = false ]; then
        test_live_reload
        test_webservice_live_reload
    fi
    
    # Validation globale
    validate_deployment
    
    # Rapport final
    generate_report
    
    print_header "‚ú® Tests Termin√©s avec Succ√®s !"
    echo "Pour nettoyer les ressources : $0 --cleanup"
}

# ========================================
# üé¨ Ex√©cution
# ========================================

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "test-manifests.yaml" ] || [ ! -d "shadok" ]; then
    print_error "Script doit √™tre ex√©cut√© depuis la racine du projet shadok"
    exit 1
fi

# Lancer le script principal
main "$@"
